$Comment
    ==========================================================================

      File:        Schema.tree
      Location:    Kasumi.Akatsuki <Tree>
      Description: Kasumi界面结构Cocos2dx界面代码模板数据
      Version:     2013.02.16.
      Copyright(C) F.R.C.

    ==========================================================================

ObjectSchemaTemplate
    Keywords
    $End
    PrimitiveMappings
    $End
    Templates
        Template
            Name Main
            //Parameters: ${Header}, ${Imports}, ${Includes}, ${Contents}
            Value
                $String
                    ${Header}
                    #include ${Includes}
                    using namespace ${Imports};

                    ${Contents}

                $End
        Template
            Name Namespace
            //Parameters: ${NamespaceName}, ${Contents}
            Value
                $String
                    namespace [[${NamespaceName}]]
                    {
                        ${Contents}
                    }
        Template
            Name Header
            //Parameters:
            Value
                $String
                    //==========================================================================
                    //
                    //  Notice:      This file is automatically generated.
                    //               Please don't modify this file.
                    //
                    //==========================================================================

                    #pragma once

                    //Reference:

                    #include <memory>
                    #include <stdexcept>
                    #include <vector>
                    #include <string>
        Template
            Name Children
            //Parameters: ${ClassName}, ${ControlTypeDefinitions}, ${NamedChildDefinitions}, ${NamedChildInitializations}, ${NamedChildAssignments}, ${NamedChildDestructions}
            Value
                $String
                    template <typename UITemplate>
                    class [[${ClassName}_Children]]
                    {
                    public:
                        ${ControlTypeDefinitions}

                    private:
                        template <typename T>
                        static T *downcast(ControlType *n)
                        {
                            return UITemplate::template downcast<T>(n);
                        }

                        static void LoadChildren(std::wstring Path, ControlType *n, std::vector<std::pair<std::shared_ptr<UISchema::Control>, ControlType *>> &v)
                        {
                            UITemplate::LoadChildren(Path, n, v);
                        }

                        static void UnloadChildren(std::vector<std::pair<std::shared_ptr<UISchema::Control>, ControlType *>> &v)
                        {
                            UITemplate::UnloadChildren(v);
                        }

                    public:
                        ${NamedChildDefinitions}

                        [[${ClassName}_Children]]()
                            ${NamedChildInitializations}
                        {
                        }

                        virtual ~[[${ClassName}_Children]]()
                        {
                            UnloadChildren();
                        }

                        void LoadChildren(ControlType *Container)
                        {
                            LoadChildren(L"Login.ksb", Container, v);
                            for (auto p : v)
                            {
                                auto c = std::get<0>(p);
                                auto n = std::get<1>(p);
                                if (c == nullptr)
                                {
                                }
                                ${NamedChildAssignments}
                            }
                        }

                        void UnloadChildren()
                        {
                            ${NamedChildDestructions}
                            UnloadChildren(v);
                            v.clear();
                        }

                    private:
                        std::vector<std::pair<std::shared_ptr<UISchema::Control>, ControlType *>> v;
                    };
        Template
            Name ControlTypeDefinition
            //Parameters: ${ControlTypeName}
            Value
                $String
                    typedef typename [[UITemplate::${ControlTypeName}Type]] [[${ControlTypeName}Type]];
        Template
            Name NamedChildDefinition
            //Parameters: ${Name}, ${ControlTypeName}
            Value
                $String
                    [[${ControlTypeName}Type]] *[[${Name}]];
        Template
            Name NamedChildInitialization
            //Parameters: ${Name}
            Value
                $String
                    [[${Name}]](nullptr)
        Template
            Name NamedChildAssignment
            //Parameters: ${Name}, ${ControlTypeName}
            Value
                $String
                    else if (c->[[On${ControlTypeName}]]() && (c->[[${ControlTypeName}]]->Name == L"${Name}"))
                    {
                        [[${Name}]] = downcast<[[${ControlTypeName}Type]]>(n);
                    }
        Template
            Name NamedChildDestruction
            //Parameters: ${Name}
            Value
                $String
                    [[${Name}]] = nullptr;
